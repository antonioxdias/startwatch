{"version":3,"sources":["lib/utils.ts","lib/useTimes.ts","lib/useScramble.ts","components/Timer.tsx","components/Timetable.tsx","App.tsx","index.tsx"],"names":["Puzzle","pad","num","z","slice","timeDisplay","time","simple","s","ms","secs","mins","getTimesForPuzzle","puzzle","item","localStorage","getItem","split","map","parseInt","calcAvgOf","times","ofNumber","length","ts","maxIndex","indexOf","Math","max","splice","minIndex","min","reduce","sum","current","calcAvgAllTime","calcAverages","of5","of12","of100","allTime","useTimes","useState","setTimes","average","setAverage","useEffect","setItem","join","saveTimesForPuzzle","addTime","clearTimes","scr","Scrambo","useScramble","get","scramble","setScramble","Two","type","Three","Four","Five","Six","Seven","Clock","Mega","Pyra","SQ1","Skewb","setScramboType","TimeoutIndicator","timeoutRunning","canStart","isActive","backgroundColor","borderColor","style","height","width","margin","borderRadius","border","Timer","saveTime","counterInterval","setCounterInterval","setTime","setTimeoutRunning","setCanStart","setIsActive","stop","useCallback","reset","clearInterval","start","Date","now","setInterval","timeout","onKeyDown","ev","keyCode","setTimeout","onKeyUp","clearTimeout","document","addEventListener","removeEventListener","display","alignItems","color","fontSize","fontFamily","letterSpacing","Timetable","padding","overflow","flexDirection","maxHeight","index","key","App","setPuzzle","gridTemplateRows","placeItems","value","onChange","target","Object","values","p","onClick","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c31502fa.chunk.js","sourcesContent":["export enum Puzzle {\n  Two = \"2x2x2\",\n  Three = \"3x3x3\",\n  Four = \"4x4x4\",\n  Five = \"5x5x5\",\n  Six = \"6x6x6\",\n  Seven = \"7x7x7\",\n  Clock = \"Clock\",\n  Mega = \"Megaminx\",\n  Pyra = \"Pyraminx\",\n  SQ1 = \"Square-1\",\n  Skewb = \"Skewb\"\n}\n\nconst pad = (num: number, z: number = 2) => ('00' + num).slice(-z)\n\nexport const timeDisplay = (time: number, simple: boolean = false) => {\n  let s = time\n  const ms = s % 1000\n  s = (s - ms) / 1000\n  const secs = s % 60\n  s = (s - secs) / 60\n  const mins = s % 60\n\n  if (simple && mins === 0) return pad(secs) + '.' + pad(ms, 3)\n  return pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3)\n}\n","import { useState, useEffect } from 'react'\n\ninterface Average {\n  of5: number | null\n  of12: number | null\n  of100: number | null\n  allTime: number | null\n}\n\nconst getTimesForPuzzle = (puzzle: string) => {\n  const item = localStorage.getItem(puzzle)\n  if (!item) return []\n\n  return item.split(';').map(time => parseInt(time))\n}\n\nconst saveTimesForPuzzle = (puzzle: string, times: number[]) => {\n  localStorage.setItem(puzzle, times.join(';'))\n}\n\nconst calcAvgOf = (times: number[], ofNumber: number) => {\n  if (times.length < ofNumber) return null\n\n  // keep only last 5 results\n  const ts = times.slice(times.length - ofNumber)\n  // remove best time\n  const maxIndex = ts.indexOf(Math.max(...ts))\n  ts.splice(maxIndex, 1)\n  // remove worst time\n  const minIndex = ts.indexOf(Math.min(...ts))\n  ts.splice(minIndex, 1)\n\n  return ts.reduce((sum, current) => sum + current) / (ofNumber - 2)\n}\n\nconst calcAvgAllTime = (times: number[]) => {\n  if (!times.length) return null\n  return times.reduce((sum, current) => sum + current) / times.length\n}\n\nconst calcAverages = (times: number[]) => {\n  return {\n    of5: calcAvgOf(times, 5),\n    of12: calcAvgOf(times, 12),\n    of100: calcAvgOf(times, 100),\n    allTime: calcAvgAllTime(times)\n  } as Average\n}\n\nconst useTimes = (puzzle: string) => {\n  const [times, setTimes] = useState<number[]>(getTimesForPuzzle(puzzle) || [])\n  const [average, setAverage] = useState<Average>(calcAverages(times))\n\n  useEffect(() => setTimes(getTimesForPuzzle(puzzle)), [puzzle])\n  useEffect(() => saveTimesForPuzzle(puzzle, times), [times, puzzle])\n  useEffect(() => setAverage(calcAverages(times)), [times])\n\n  return {\n    times,\n    addTime: (time: number) => setTimes(times => [...times, time]),\n    clearTimes: () => setTimes([]),\n    average\n  }\n}\n\nexport default useTimes","import { useState, useEffect } from 'react'\nimport Scrambo from 'scrambo' \nimport { Puzzle } from './utils'\n\nconst scr = new Scrambo()\n\nconst setScramboType = (scr: Scrambo, puzzle: Puzzle) => {\n  switch (puzzle) {\n    case Puzzle.Two:\n      scr.type('222')\n      break\n    case Puzzle.Three:\n      scr.type('333')\n      break\n    case Puzzle.Four:\n      scr.type('444')\n      break\n    case Puzzle.Five:\n      scr.type('555')\n      break\n    case Puzzle.Six:\n      scr.type('666')\n      break\n    case Puzzle.Seven:\n      scr.type('777')\n      break\n    case Puzzle.Clock:\n      scr.type('clock')\n      break\n    case Puzzle.Mega:\n      scr.type('minx')\n      break\n    case Puzzle.Pyra:\n      scr.type('pyram')\n      break\n    case Puzzle.SQ1:\n      scr.type('sq1')\n      break\n    case Puzzle.Skewb:\n      scr.type('skewb')\n      break\n    default:\n      break\n  }\n}\n\nconst useScramble = (puzzle: Puzzle, times: number[]) => {\n  const [scramble, setScramble] = useState(scr.get(1))\n\n  // new scramble when puzzle changes\n  useEffect(() => {\n    setScramboType(scr, puzzle)\n    setScramble(scr.get(1))\n  }, [puzzle])\n  // new scramble when times changes\n  useEffect(() => setScramble(scr.get(1)), [times])\n\n  return {\n    scramble\n  }\n}\n\nexport default useScramble\n","import React, { useState, useEffect, useCallback } from 'react'\nimport { timeDisplay } from '../lib/utils'\n\nconst startTimeout = 1000\n\nconst Timer = ({ saveTime }: { saveTime: (time: number) => void }) => {\n  const [counterInterval, setCounterInterval] = useState<NodeJS.Timeout | null>(null)\n  const [time, setTime] = useState(0)\n  const [timeoutRunning, setTimeoutRunning] = useState(false)\n  const [canStart, setCanStart] = useState(false)\n  const [isActive, setIsActive] = useState(false)\n\n  const start = () => {\n    setTime(0)\n    setIsActive(true)\n  }\n  const stop = useCallback((time: number) => {\n    setIsActive(false)\n    setCanStart(false)\n\n    saveTime(time)\n  }, [saveTime])\n  const reset = useCallback((time: number) => {\n    if (isActive) stop(time)\n    setTime(0)\n  }, [isActive, stop])\n\n  useEffect(() => {\n    if (isActive && counterInterval && time >= 3600000) { // 1h in centiseconds\n      clearInterval(counterInterval)\n      setCounterInterval(null)\n      stop(time)\n    }\n\n    if (isActive && !counterInterval && time === 0) {\n      const start = Date.now()\n      setCounterInterval(setInterval(() => setTime(Date.now() - start), 1))\n    } else if (!isActive && time !== 0 && counterInterval) {\n      clearInterval(counterInterval)\n      setCounterInterval(null)\n    }\n    return () => {\n      if (counterInterval && !isActive) {\n        clearInterval(counterInterval)\n        setCounterInterval(null)\n      }\n    }\n  }, [isActive, stop, counterInterval, time])\n\n  useEffect(() => {\n    let timeout: NodeJS.Timeout | null = null\n    const onKeyDown = (ev: KeyboardEvent) => {\n      // space -> start countdown to start\n      if (ev.keyCode === 32 && !timeoutRunning && !isActive) {\n        setCanStart(false)\n        setTimeoutRunning(true)\n        timeout = setTimeout(() => {\n          setCanStart(true)\n        }, startTimeout)\n      }\n\n      // r, R -> reset\n      if (ev.keyCode === 82) {\n        reset(time)\n      }\n    }\n\n    const onKeyUp = (ev: KeyboardEvent) => {\n      // space -> start/stop\n      if (ev.keyCode === 32) {\n        setTimeoutRunning(false)\n        if (timeout) clearTimeout(timeout)\n        if (isActive && time !== 0) stop(time)\n        if (!isActive && canStart) start()\n      }\n    }\n\n    document.addEventListener('keydown', onKeyDown)\n    document.addEventListener('keyup', onKeyUp)\n    return () => {\n      document.removeEventListener('keydown', onKeyDown)\n      document.removeEventListener('keyup', onKeyUp)\n    }\n  }, [timeoutRunning, canStart, isActive, time, reset, stop])\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center'\n      }}\n    >\n      <TimeoutIndicator timeoutRunning={timeoutRunning} canStart={canStart} isActive={isActive} />\n      <h1\n        style={{\n          color: 'wheat',\n          fontSize: 'min(calc(100vw * 0.15), 140px)',\n          fontFamily: 'monospace, monospace',\n          letterSpacing: '-0.5rem',\n          margin: 0\n        }}\n      >\n        { timeDisplay(time) }\n      </h1>\n      <TimeoutIndicator timeoutRunning={timeoutRunning} canStart={canStart} isActive={isActive} />\n    </div>\n  )\n}\n\nconst TimeoutIndicator = ({ timeoutRunning, canStart, isActive }: {\n  timeoutRunning: boolean;\n  canStart: boolean;\n  isActive: boolean;\n}) => {\n  let backgroundColor = 'transparent'\n  let borderColor = 'transparent'\n  if (!canStart && timeoutRunning && !isActive) {\n    backgroundColor = 'darkred'\n    borderColor = 'red'\n  }\n  if (canStart && timeoutRunning && !isActive) {\n    backgroundColor = 'limegreen'\n    borderColor = 'green'\n  }\n\n  return (\n    <div\n      style={{\n        height: '2rem',\n        width: '2rem',\n        margin: '1rem',\n        backgroundColor,\n        borderRadius: '50%',\n        border: `solid 2px ${borderColor}`\n      }}\n    />\n  )\n}\n\nexport default Timer \n","import React from 'react'\nimport { timeDisplay } from '../lib/utils'\n\nconst Timetable = ({ times }: { times: number[]}) => {\n\n  return (\n    <div style={{\n      margin: '0 1rem',\n      padding: '1rem',\n      border: 'solid 1px wheat',\n      borderRadius: '8px',\n      overflow: 'hidden auto'\n    }}>\n      <ol\n       style={{\n         display: 'flex',\n         flexDirection: 'column',\n         margin: 0,\n         width: 320,\n         maxHeight: 338\n       }}\n      >\n        {\n          times.map((time: number, index: number) => (\n            <li\n              key={index}\n              style={{\n                fontFamily: 'monospace, monospace'\n              }}\n            >\n              { timeDisplay(time, true) }\n            </li>\n          ))\n        }\n      </ol>\n    </div>\n  )\n}\n\nexport default Timetable\n\n","import React, { useState } from 'react'\nimport { Puzzle, timeDisplay } from './lib/utils'\nimport useTimes from './lib/useTimes'\nimport useScramble from './lib/useScramble'\nimport Timer from './components/Timer'\nimport Timetable from './components/Timetable'\n\nfunction App() {\n  const [puzzle, setPuzzle] = useState(Puzzle.Three)\n  const {\n    times,\n    addTime,\n    clearTimes,\n    average\n  } = useTimes(puzzle)\n  const { scramble } = useScramble(puzzle, times)\n\n  return (\n    <main\n      style={{\n        display: 'grid',\n        gridTemplateRows: '120px 30% 1fr',\n        placeItems: 'center',\n        backgroundColor: '#282c34',\n        height: '100vh',\n        fontSize: 'calc(10px + 2vmin)',\n        color: 'white'\n      }}\n    >\n      <div>\n        <select\n          value={puzzle}\n          onChange={ev => setPuzzle(ev.target.value as Puzzle)}\n        >\n          {Object.values(Puzzle).map(p => (\n            <option key={p} value={p}>{p}</option>\n          ))}\n        </select>\n        <p>{scramble}</p>\n      </div>\n      <Timer saveTime={addTime} />\n      <div\n        style={{\n          display: 'flex'\n        }}\n      >\n        <Timetable times={times} />\n        <div>\n          <p>\n            avg5: {average.of5 ? timeDisplay(average.of5) : '---'}\n          </p>\n          <p>\n            avg12: {average.of12 ? timeDisplay(average.of12) : '---'}\n          </p>\n          <button onClick={clearTimes}>clear times</button>\n        </div>\n      </div>\n    </main>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  (<App />),\n  document.getElementById('root')\n)\n\n\n"],"sourceRoot":""}